// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var config, createTemplate, deliverEmail, EloquaClient, FileWatcher, fs, Litmus, LITMUS_CLIENTS, pathLib, renderEmailTemplate, renderers, renderOptions, templateConfig, templates;
  fs = require('fs');
  pathLib = require('path');
  config = require('./config');
  Litmus = require('./litmus-client');
  FileWatcher = require('./file-watcher');
  renderEmailTemplate = require('./render-email-template');
  EloquaClient = require('./eloqua-client');
  deliverEmail = require('./deliver-email');
  createTemplate = require('./create-template');
  templateConfig = require('./template-config');
  renderers = require('./transformers/template').renderers;
  templates = require('./templates');
  LITMUS_CLIENTS = [
    'android22',
    'android4',
    'aolonline',
    'androidgmailapp',
    'appmail6',
    'iphone5s',
    'ipadmini',
    'ipad',
    'gmailnew',
    'ffgmailnew',
    'chromegmailnew',
    'iphone4',
    'iphone5',
    'ol2007',
    'ol2010',
    'ol2011',
    'ol2013',
    'outlookcom',
    'ffoutlookcom',
    'chromeoutlookcom',
    'plaintext',
    'yahoo',
    'ffyahoo',
    'chromeyahoo',
    'windowsphone8'
  ];
  module.exports = function (app) {
    app.get('/templates.json', function (req, res) {
      return templates.all(function (err, templates) {
        if (err)
          return res.status(500).send(err);
        return res.send(templates);
      });
    });
    app.get('/templates/:templateName.html', function (req, res) {
      return renderEmailTemplate(req.params.templateName, 'html', renderOptions(req), function (err, contents) {
        if (err)
          return res.status(500).send(err);
        return res.send(contents);
      });
    });
    app.get('/templates/:templateName.txt', function (req, res) {
      return renderEmailTemplate(req.params.templateName, 'text', renderOptions(req), function (err, contents) {
        if (err)
          return res.status(500).send(err);
        return res.send(contents);
      });
    });
    app.get('/templates/:templateName/images/:path', function (req, res) {
      return fs.readFile('' + config.root + '/templates/' + req.params.templateName + '/images/' + req.params.path, function (err, img) {
        if (err)
          return res.status(500).send(err);
        return res.send(img);
      });
    });
    app.post('/templates/:templateName/litmus', function (req, res) {
      return renderEmailTemplate(req.params.templateName, 'html', renderOptions(req, { useAbsoluteUrls: true }), function (err, contents) {
        var litmusClient;
        if (err)
          return res.status(500).send(err);
        litmusClient = new Litmus({
          username: config.litmus.username,
          password: config.litmus.password,
          url: config.litmus.url,
          clients: LITMUS_CLIENTS,
          html: contents,
          title: 'TEST: ' + req.params.templateName
        });
        return litmusClient.run(function (err, status) {
          if (err)
            return res.status(500).send(err);
          return res.status(200).send(status);
        });
      });
    });
    app.post('/templates/:templateName/email', function (req, res) {
      var recipient, templateName;
      templateName = req.params.templateName;
      recipient = req.param('email');
      if (!recipient)
        return res.status(400).send({ error: 'No email received' });
      return deliverEmail(templateName, [recipient], renderOptions(req, { useAbsoluteUrls: true }), function (err) {
        if (err)
          return res.status(500).send(err);
        return res.send('ok');
      });
    });
    app.post('/templates', function (req, res) {
      var templateName;
      templateName = req.param('templateName');
      if (!templateName)
        return res.status(404).send('not found');
      return createTemplate(templateName, function (err, path) {
        if (err)
          return res.status(500).send(err);
        FileWatcher.instance().watchTemplate(templateName);
        return res.send('ok');
      });
    });
    app.post('/templates/:templateName/eloqua', function (req, res) {
      var client;
      client = new EloquaClient(req.params.templateName);
      return client.save(function (err, payload) {
        if (err)
          return res.status(500).send(err);
        return res.send(payload);
      });
    });
    app.get('/templates/:templateName/config', function (req, res) {
      return templateConfig(req.params.templateName, function (err, tconfig) {
        if (err)
          return res.status(500).send(err);
        return res.send(tconfig);
      });
    });
    app.post('/templates/:templateName/config', function (req, res) {
      return templateConfig(req.params.templateName, req.body, function (err, tconfig) {
        if (err)
          return res.status(500).send(err);
        return tconfig.save(function (err) {
          if (err)
            return res.status(500).send(err);
          return res.send(req.body);
        });
      });
    });
    app.get('/renderers', function (req, res) {
      var keys;
      keys = Object.keys(renderers);
      return res.send(keys.map(function (key) {
        return {
          key: key,
          label: renderers[key].label
        };
      }));
    });
    return app.get('*', function (req, res) {
      return res.sendfile(pathLib.resolve('' + __dirname + '/../../public/index.html'));
    });
  };
  renderOptions = function (req, overrides) {
    var k, options, v;
    if (null == overrides)
      overrides = {};
    options = {
      useAbsoluteUrls: req.param('useAbsoluteUrls') === 'true',
      renderer: req.param('renderer'),
      dataIndex: req.param('dataIndex') ? parseInt(req.param('dataIndex'), 10) : void 0
    };
    for (var i$ = 0, length$ = overrides.length; i$ < length$; ++i$) {
      k = overrides[i$];
      v = i$;
      options[k] = v;
    }
    return options;
  };
}.call(this);
