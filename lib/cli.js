// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var commands, config, exec, fs, parseOpts, pathLib, renderEmailTemplate;
  fs = require('fs');
  pathLib = require('path');
  exec = require('child_process').exec;
  renderEmailTemplate = require('./server/render-email-template');
  config = require('./server/config');
  exports.run = function (command, options) {
    options = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];
    if (commands[command]) {
      return commands[command].apply(commands, [].slice.call(options).concat());
    } else {
      return commands.help();
    }
  };
  commands = {
    help: function (commandName) {
      switch (commandName) {
      case 'render':
        return console.log('Usage:\n  gleemail render <templateName> [-ort]\n    -i <index>    :: Render template with data in position <index> in the data file\n    -o <filepath> :: Write output to the specified file (defaults to stdout)\n    -r <renderer> :: Use the specified renderer (defaults to "data")\n    -t <type>     :: Render either "html" or "text" versions (defaults to "html")');
      default:
        return console.log('Usage:\n  gleemail project <dirname>       :: Bootstrap an email project directory structure\n  gleemail template <templateName> :: Bootstrap an email template in the current directory\n  gleemail start                   :: Starts the development server on port 4343\n  gleemail render <templateName>   :: Outputs the rendered HTML to stdout\n  gleemail help <command>          :: See documentation for a particular command');
      }
    },
    project: function (dirname) {
      var targetDir;
      targetDir = '' + config.root + '/' + dirname;
      return exec('cp -r ' + __dirname + '/../project-template ' + targetDir, function (err, stdout, stderr) {
        if (err) {
          console.error(err);
          return console.error(stderr);
        } else {
          console.log('Created project ' + targetDir);
          config.root = targetDir;
          return commands.template('example');
        }
      });
    },
    template: function (templateName) {
      var createTemplate;
      createTemplate = require('./server/create-template');
      return createTemplate(templateName, function (err, path) {
        if (err) {
          return console.error(err);
        } else {
          return console.log('Created ' + path);
        }
      });
    },
    start: function () {
      var port;
      require('./server');
      port = process.env.PORT || 4433;
      return exec('open http://localhost:' + port);
    },
    dev: function () {
      require('coffee-script-redux/register');
      return require('' + __dirname + '/../src/server');
    },
    render: function (templateName, opts) {
      var options, type;
      opts = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];
      opts = parseOpts(opts);
      type = 'html';
      options = {
        useAbsoluteUrls: true,
        renderer: opts.r,
        dataIndex: opts.i ? parseInt(opts.i, 10) : void 0
      };
      return renderEmailTemplate(templateName, opts.t || 'html', options, function (err, contents) {
        if (opts.o) {
          return fs.writeFileSync(pathLib.resolve(opts.o), contents);
        } else {
          return console.log(contents);
        }
      });
    }
  };
  parseOpts = function (opts) {
    var key, m, out, val;
    out = {};
    key = null;
    for (var i$ = 0, length$ = opts.length; i$ < length$; ++i$) {
      val = opts[i$];
      if (m = val.match(/^-(\w)$/)) {
        key = m[1];
      } else {
        out[key] = val;
        key = null;
      }
    }
    return out;
  };
}.call(this);
